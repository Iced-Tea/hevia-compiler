// vim: syntax=swift
import token

class Token {
  let kind:Int = 0
  let next:Token = nil
  let value:String = nil
  constructor() {}
}

func isAlpha(cc:Int)->Boolean {
  return (
    cc >= 65 && cc <= 90 ||
    cc >= 97 && cc <= 122 ||
    cc == 95
  )
}

func isNumber(cc:Int)->Boolean {
  return (
    cc >= 48 && cc <= 57
  );
}

func lex(str:String)->Void {

  let idx = 0
  let length = str.length
  let cc:Int = nil
  let ch:String = nil
  let last = Token()

  while (idx < length) {
    cc = str.charCodeAt(idx)

    // Extract identifier
    if (isAlpha(cc)) {
      let buffer = ""
      while (true) {
        ch = str.charAt(idx)
        cc = str.charCodeAt(idx)
        if (!isAlpha(cc)) {
          break;
        }
        buffer += ch
        idx++
      }
      let token = Token()
      token.kind = TokenKind.Identifier
      token.value = buffer
      last.next = token
      last = token;
    }

    // Extract number
    else if (isNumber(cc)) {
      let buffer = ""
      while (true) {
        ch = str.charAt(idx)
        cc = str.charCodeAt(idx)
        if (!isNumber(cc)) {
          break;
        }
        buffer += ch
        idx++
      }
      let token = Token()
      token.kind = TokenKind.NumberLiteral
      token.value = buffer
      last.next = token
      last = token;
    }

    else {
      idx++
    }

  }

}

lex("let a:Int = 10;")
